/*!
* @erwinstone/cssmin v1.0.2 (https://github.com/erwinstone/cssmin#readme)
* Copyright 2021 - 2022 erwinstone
* Licensed under MIT (https://github.com/erwinstone/cssmin/blob/master/LICENSE)
*/
var e=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var w=(t,n)=>{for(var s in n)e(t,s,{get:n[s],enumerable:!0})},y=(t,n,s,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of p(n))!d.call(t,r)&&r!==s&&e(t,r,{get:()=>n[r],enumerable:!(i=g(n,r))||i.enumerable});return t};var $=t=>y(e({},"__esModule",{value:!0}),t);var W={};w(W,{cssmin:()=>b,cssminRaw:()=>F});module.exports=$(W);var o=require("fs"),u=require("path"),c=require("perf_hooks"),h=require("chokidar"),a=require("esbuild");const m={starting:t=>(console.log(`Starting '${t}'...`),c.performance.now()),finished:(t,n)=>{let s=Math.round(c.performance.now()-n),i=s>=1e3?`${(s/1e3).toFixed(2)} s`:`${Math.round(s)} ms`;i=i.toString(),console.log(`Finished '${t}' after ${i}`)}};async function f(t,n){n=n||[];const s=await o.promises.readdir(t);for(const i of s){const r=u.posix.join(t,i);(await o.promises.stat(r)).isDirectory()?n=await f(r,n):n.push(r)}return x(n)}function x(t){return t.filter(n=>n.endsWith(".css")&&!n.endsWith(".min.css"))}async function l(t){const n=m.starting("cssmin");let s=[];(await o.promises.stat(t)).isDirectory()?s=await f(t):s.push(t),await Promise.all(s.map(i=>{(0,a.build)({entryPoints:[i],outfile:i.slice(0,-3)+"min.css",minify:!0})})),m.finished("cssmin",n)}function P(t){(0,h.watch)(t,{ignoreInitial:!0}).on("all",(n,s)=>setTimeout(async()=>!s.endsWith(".min.css")&&await l(t),200)).on("ready",()=>console.log("Ready for changes"))}async function b(t){t.watch===!0?P(t.path):await l(t.path)}async function F(t){return(await(0,a.transform)(t,{loader:"css",minify:!0})).code}0&&(module.exports={cssmin,cssminRaw});
