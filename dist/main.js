/*!
* @erwinstone/cssmin v1.0.0 (https://github.com/erwinstone/cssmin#readme)
* Copyright 2021 erwinstone
* Licensed under MIT (https://github.com/erwinstone/cssmin/blob/master/LICENSE)
*/
var e=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var w=t=>e(t,"__esModule",{value:!0});var y=(t,n)=>{for(var s in n)e(t,s,{get:n[s],enumerable:!0})},$=(t,n,s,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of p(n))!d.call(t,r)&&(s||r!=="default")&&e(t,r,{get:()=>n[r],enumerable:!(i=g(n,r))||i.enumerable});return t};var x=(t=>(n,s)=>t&&t.get(n)||(s=$(w({}),n,1),t&&t.set(n,s),s))(typeof WeakMap!="undefined"?new WeakMap:0);var D={};y(D,{cssmin:()=>F,cssminRaw:()=>W});var o=require("fs"),m=require("path"),c=require("perf_hooks"),f=require("chokidar"),a=require("esbuild");const l={starting:t=>(console.log(`Starting '${t}'...`),c.performance.now()),finished:(t,n)=>{let s=Math.round(c.performance.now()-n),i=s>=1e3?`${(s/1e3).toFixed(2)} s`:`${Math.round(s)} ms`;i=i.toString(),console.log(`Finished '${t}' after ${i}`)}};async function u(t,n){n=n||[];const s=await o.promises.readdir(t);for(const i of s){const r=m.posix.join(t,i);(await o.promises.stat(r)).isDirectory()?n=await u(r,n):n.push(r)}return P(n)}function P(t){return t.filter(n=>n.endsWith(".css")&&!n.endsWith(".min.css"))}async function h(t){const n=l.starting("cssmin");let s=[];(await o.promises.stat(t)).isDirectory()?s=await u(t):s.push(t),await Promise.all(s.map(i=>{(0,a.build)({entryPoints:[i],outfile:i.slice(0,-3)+"min.css",minify:!0})})),l.finished("cssmin",n)}function b(t){(0,f.watch)(t,{ignoreInitial:!0}).on("all",(n,s)=>setTimeout(async()=>!s.endsWith(".min.css")&&await h(t),200)).on("ready",()=>console.log("Ready for changes"))}async function F(t){t.watch===!0?b(t.path):await h(t.path)}async function W(t){return(await(0,a.transform)(t,{loader:"css",minify:!0})).code}module.exports=x(D);0&&(module.exports={cssmin,cssminRaw});
